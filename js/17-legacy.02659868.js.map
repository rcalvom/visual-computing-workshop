{"version":3,"file":"js/17-legacy.02659868.js","mappings":"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","sources":["webpack://visual-computing-workshop/./src/pages/ImageProcessing.vue?b281","webpack://visual-computing-workshop/./src/sketches/image_processing.p5.js","webpack://visual-computing-workshop/./src/sketches/magnifier.p5.js","webpack://visual-computing-workshop/src/pages/ImageProcessing.vue","webpack://visual-computing-workshop/./src/pages/ImageProcessing.vue?caaa","webpack://visual-computing-workshop/./src/pages/ImageProcessing.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-container',{staticClass:\"mt-4\"},[_c('b-row',{attrs:{\"align-content\":\"center\",\"align-h\":\"center\",\"align-v\":\"center\"}},[_c('h1',{staticClass:\"mt-4\"},[_vm._v(\"Image Processing\")])]),_c('b-row',[_c('h2',{staticClass:\"mt-4\"},[_vm._v(\"Introduction\")])]),_c('b-row',{attrs:{\"align-h\":\"left\",\"align-v\":\"left\"}},[_c('p',{staticClass:\"text-justify\"},[_vm._v(\" Digital image processing is the use of a digital computer to process digital images through an algorithm.[1][2] As a subcategory or field of digital signal processing, digital image processing has many advantages over analog image processing. It allows a much wider range of algorithms to be applied to the input data and can avoid problems such as the build-up of noise and distortion during processing. Since images are defined over two dimensions (perhaps more) digital image processing may be modeled in the form of multidimensional systems. The generation and development of digital image processing are mainly affected by three factors: first, the development of computers; second, the development of mathematics (especially the creation and improvement of discrete mathematics theory); third, the demand for a wide range of applications in environment, agriculture, military, industry and medical science has increased. \")])]),_c('b-row',{attrs:{\"align-h\":\"left\",\"align-v\":\"left\"}},[_c('h3',[_vm._v(\"Ridge detection\")]),_c('p',{staticClass:\"text-justify\"},[_vm._v(\"In image processing, ridge detection is the attempt, via software, to locate ridges in an image, defined as curves whose points are local maxima of the function, akin to geographical ridges. For a function of N variables, its ridges are a set of curves whose points are local maxima in N âˆ’ 1 dimensions. In this respect, the notion of ridge points extends the concept of a local maximum. Correspondingly, the notion of valleys for a function can be defined by replacing the condition of a local maximum with the condition of a local minimum. The union of ridge sets and valley sets, together with a related set of points called the connector set, form a connected set of curves that partition, intersect, or meet at the critical points of the function. This union of sets together is called the function's relative critical set.\")]),_c('b-img',{attrs:{\"thumbnail\":\"\",\"center\":\"\",\"width\":\"500\",\"src\":\"https://media.springernature.com/full/springer-static/image/art%3A10.1007%2Fs12046-019-1138-5/MediaObjects/12046_2019_1138_Fig9_HTML.jpg\"}})],1),_c('b-row',{attrs:{\"align-h\":\"left\",\"align-v\":\"left\"}},[_c('h3',[_vm._v(\"Sharpen effect\")]),_c('p',{staticClass:\"text-justify\"},[_vm._v(\"A sharpening filter makes the transition between the various regions present in an image more obvious rather than being smooth. As an image passes through a sharpening filter the brighter pixels are boosted as relative to its neighbors.\")]),_c('b-img',{attrs:{\"thumbnail\":\"\",\"center\":\"\",\"width\":\"500\",\"src\":\"https://i.stack.imgur.com/1yRRJ.png\"}})],1),_c('b-row',{attrs:{\"align-h\":\"left\",\"align-v\":\"left\"}},[_c('h3',[_vm._v(\"Box blur filter\")]),_c('p',{staticClass:\"text-justify\"},[_vm._v(\"A box blur (also known as a box linear filter) is a spatial domain linear filter in which each pixel in the resulting image has a value equal to the average value of its neighboring pixels in the input image. It is a form of low-pass (\\\"blurring\\\") filter.\")]),_c('b-img',{attrs:{\"thumbnail\":\"\",\"center\":\"\",\"width\":\"500\",\"src\":\"https://miro.medium.com/max/1400/1*DUut28QltnpM2d3MAQQhGw.png\"}})],1),_c('b-row',[_c('h3',[_vm._v(\"Results\")])]),_c('b-col',[_c('h3',[_vm._v(\"Image/Video Processing App\")]),_c('SketchP5',{staticClass:\"mt-4\",attrs:{\"sketch\":_vm.first_sketch,\"width\":960,\"heigth\":640,\"index\":'-1'}})],1),_c('b-col',[_c('h3',[_vm._v(\"Magnifier\")]),_c('SketchP5',{staticClass:\"mt-4\",attrs:{\"sketch\":_vm.second_sketch,\"width\":960,\"heigth\":640,\"index\":'-2'}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * Application of Scene Tree using as input a Wacom stylus p5.js\n * @param {p5} p5 reference \n */\n\n const sketch = (p5) => {\n    const WIDTH = 960;\n    const HEIGHT = 540;\n\n    let maskShader;\n    let img;\n    let video_src;\n    let video_on;\n    let selector;\n    let selector2;\n    let region;\n    let radius;\n    let type;\n\n    let identity_kernel = [0, 0, 0, 0, 1, 0, 0, 0, 0];\n    let ridge_kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n    let sharpen_kernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n    let box_blur_kernel = [1/9, 1/9, 1/9, 1/9, 1/3, 1/9, 1/9, 1/9, 1/9];\n    let gaussian_blur_kernel = [1/16, 1/8, 1/16, 1/8, 1, 1/8, 1/16, 1/8, 1/16];\n\n    p5.preload = () => {\n        video_src = p5.createVideo(['https://upload.wikimedia.org/wikipedia/commons/transcoded/8/87/Schlossbergbahn.webm/Schlossbergbahn.webm.720p.vp9.webm']);\n        video_src.hide();\n        maskShader = p5.readShader('shaders/mask.frag', { matrices: p5.Tree.pMatrix | p5.Tree.mvMatrix, varyings: p5.Tree.texcoords2 });\n        //img = loadImage('/sketches/shaders/tree.jpeg');\n        img = p5.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Fire_breathing_2_Luc_Viatour.jpg/800px-Fire_breathing_2_Luc_Viatour.jpg');\n    }\n\n    p5.setup = () => {\n        // Canvas definition\n        let canvas = p5.createCanvas(WIDTH, HEIGHT, p5.WEBGL);\n        canvas.parent(\"vue-canvas-1\");\n        p5.noStroke();\n        p5.textureMode(p5.NORMAL);\n        video_on = p5.createCheckbox('Video', false);\n        video_on.parent(\"vue-canvas-1\");\n        video_on.style('color', 'white');\n        video_on.changed(() => {\n            if (video_on.checked()) {\n                maskShader.setUniform('texture', video_src);\n                video_src.loop();\n            } else {\n                maskShader.setUniform('texture', img);\n                video_src.pause();\n            }\n        });\n        video_on.position(100, 160);\n\n        radius = p5.createSlider(20, 200, 20);\n        radius.parent(\"vue-canvas-1\");\n        radius.position(100, 240);\n        radius.style('width', '80px');\n\n        region = p5.createCheckbox('Region of interest', false);\n        region.parent(\"vue-canvas-1\");\n        region.style('color', 'white');\n        region.changed(() => {\n            if (region.checked()) {\n                maskShader.setUniform('region', true);\n            } else {\n                maskShader.setUniform('region', false);\n            }\n        });\n        region.position(100, 200);\n        \n        selector = p5.createSelect();\n        selector.parent(\"vue-canvas-1\");\n        selector.position(100, 80);\n        selector.option(\"Identity Kernel\");\n        selector.option(\"Ridge Kernel\");\n        selector.option(\"Sharpen Kernel\");\n        selector.option(\"Box Blur Kernel\");\n        selector.option(\"Gaussian Blur Kernel\");\n        selector.selected(\"Identity Kernel\");\n        selector.changed(() => {\n            let item = selector.value();\n            if (item === \"Identity Kernel\") {\n                maskShader.setUniform('mask', identity_kernel);\n            } else if (item === \"Ridge Kernel\") {\n                maskShader.setUniform('mask', ridge_kernel);\n            } else if (item === \"Sharpen Kernel\") {\n                maskShader.setUniform('mask', sharpen_kernel);\n            } else if (item === \"Box Blur Kernel\") {\n                maskShader.setUniform('mask', box_blur_kernel);\n            } else if (item === \"Gaussian Blur Kernel\") {\n                maskShader.setUniform('mask', gaussian_blur_kernel);\n            }\n        });\n        selector2 = p5.createSelect();\n        selector2.parent(\"vue-canvas-1\");\n        selector2.position(100, 120);\n        selector2.option(\"Original\");\n        selector2.option(\"Luma\");\n        selector2.option(\"HSV\");\n        selector2.option(\"HSL\");\n        selector2.selected(\"RG\");\n        selector2.changed(() => {\n            let item = selector2.value();\n            if (item === \"Original\") {\n                type = 0;\n                maskShader.setUniform('grey_scale', false);\n            } else if (item === \"Luma\") {\n                type = 1;\n                maskShader.setUniform('grey_scale', true);\n            } else if (item === \"HSV\") {\n                type = 2;\n                maskShader.setUniform('grey_scale', true);\n            } else if (item === \"HSL\") {\n                type = 3;\n                maskShader.setUniform('grey_scale', true);\n            }\n            maskShader.setUniform('type', type);\n        });\n        p5.shader(maskShader);\n        maskShader.setUniform('grey_scale', false);\n        maskShader.setUniform('radius', 20.0);\n        maskShader.setUniform('mask', identity_kernel);\n        maskShader.setUniform('texture', img);\n        p5.emitTexOffset(maskShader, img, 'texOffset');\n    }\n\n    p5.draw = () => {\n        p5.background(0);\n        p5.quad(-WIDTH / 2, -HEIGHT / 2, WIDTH / 2, -HEIGHT / 2, WIDTH / 2, HEIGHT / 2, -WIDTH / 2, HEIGHT / 2);\n        maskShader.setUniform('mouse_x', p5.mouseX);\n        maskShader.setUniform('mouse_y', HEIGHT - p5.mouseY);\n        maskShader.setUniform('radius', radius.value());\n    }\n\n}\n\nexport default sketch;\n\n","/**\n * Application of Scene Tree using as input a Wacom stylus p5.js\n * @param {p5} p5 reference \n */\n\n const sketch = (p5) => {\n    const WIDTH = 960;\n    const HEIGHT = 540;\n\n    let maskShader;\n    let img;\n    let video_src;\n    let video_on;\n    let radius;\n    let magnifier;\n\n    p5.preload = () => {\n        video_src = p5.createVideo(['https://upload.wikimedia.org/wikipedia/commons/transcoded/8/87/Schlossbergbahn.webm/Schlossbergbahn.webm.720p.vp9.webm']);\n        video_src.hide();\n        maskShader = p5.readShader('shaders/magnifier.frag', { matrices: p5.Tree.pMatrix | p5.Tree.mvMatrix, varyings: p5.Tree.texcoords2 });\n        //img = loadImage('/sketches/shaders/tree.jpeg');\n        img = p5.loadImage('images/fire_breathing.jpg');\n    }\n\n    p5.setup = () => {\n        // Canvas definition\n        let canvas = p5.createCanvas(WIDTH, HEIGHT, p5.WEBGL);\n        canvas.parent(\"vue-canvas-2\");\n        p5.noStroke();\n        p5.textureMode(p5.NORMAL);\n        video_on = p5.createCheckbox('Video', false);\n        video_on.parent(\"vue-canvas-2\");\n        video_on.style('color', 'white');\n        video_on.changed(() => {\n            if (video_on.checked()) {\n                maskShader.setUniform('texture', video_src);\n                video_src.loop();\n            } else {\n                maskShader.setUniform('texture', img);\n                video_src.pause();\n            }\n        });\n        video_on.position(100, 80);\n\n        radius = p5.createSlider(20, 200, 20);\n        radius.parent(\"vue-canvas-2\");\n        radius.position(100, 160);\n        radius.style('width', '80px');\n\n        magnifier = p5.createCheckbox('Magnifier', false);\n        magnifier.parent(\"vue-canvas-2\");\n        magnifier.style('color', 'white');\n        magnifier.changed(() => {\n            if (magnifier.checked()) {\n                maskShader.setUniform('magnifier', true);\n            } else {\n                maskShader.setUniform('magnifier', false);\n            }\n        });\n        magnifier.position(100, 120);\n        \n        p5.shader(maskShader);\n        maskShader.setUniform('grey_scale', false);\n        maskShader.setUniform('radius', 20.0);\n        maskShader.setUniform('scale', 1.0);\n        maskShader.setUniform('texture', img);\n        maskShader.setUniform('resolution_x', WIDTH);\n        maskShader.setUniform('resolution_y', HEIGHT);\n        p5.emitTexOffset(maskShader, img, 'texOffset');\n    }\n\n    p5.draw = () => {\n        p5.background(0);\n        p5.quad(-WIDTH / 2, -HEIGHT / 2, WIDTH / 2, -HEIGHT / 2, WIDTH / 2, HEIGHT / 2, -WIDTH / 2, HEIGHT / 2);\n        maskShader.setUniform('mouse_x', p5.mouseX);\n        maskShader.setUniform('mouse_y', HEIGHT - p5.mouseY);\n        maskShader.setUniform('radius', radius.value());\n    }\n\n}\n\nexport default sketch;\n\n","<template>\n    <b-container class=\"mt-4\">\n        <b-row align-content=\"center\" align-h=\"center\" align-v=\"center\">\n            <h1 class=\"mt-4\">Image Processing</h1>\n        </b-row>\n        <b-row>\n            <h2 class=\"mt-4\">Introduction</h2>\n        </b-row>\n        <b-row align-h=\"left\" align-v=\"left\">\n            <p class=\"text-justify\">\n                Digital image processing is the use of a digital computer to process digital images through an algorithm.[1][2] As a subcategory or field of digital signal processing, digital image processing has many advantages over analog image processing. It allows a much wider range of algorithms to be applied to the input data and can avoid problems such as the build-up of noise and distortion during processing. Since images are defined over two dimensions (perhaps more) digital image processing may be modeled in the form of multidimensional systems. The generation and development of digital image processing are mainly affected by three factors: first, the development of computers; second, the development of mathematics (especially the creation and improvement of discrete mathematics theory); third, the demand for a wide range of applications in environment, agriculture, military, industry and medical science has increased.\n            </p>\n        </b-row>\n        <b-row align-h=\"left\" align-v=\"left\">\n            <h3>Ridge detection</h3>\n            <p class=\"text-justify\">In image processing, ridge detection is the attempt, via software, to locate ridges in an image, defined as curves whose points are local maxima of the function, akin to geographical ridges.\nFor a function of N variables, its ridges are a set of curves whose points are local maxima in N âˆ’ 1 dimensions. In this respect, the notion of ridge points extends the concept of a local maximum. Correspondingly, the notion of valleys for a function can be defined by replacing the condition of a local maximum with the condition of a local minimum. The union of ridge sets and valley sets, together with a related set of points called the connector set, form a connected set of curves that partition, intersect, or meet at the critical points of the function. This union of sets together is called the function's relative critical set.</p>\n            <b-img thumbnail center width=\"500\" src=\"https://media.springernature.com/full/springer-static/image/art%3A10.1007%2Fs12046-019-1138-5/MediaObjects/12046_2019_1138_Fig9_HTML.jpg\"></b-img>\n        </b-row>\n        <b-row align-h=\"left\" align-v=\"left\">\n            <h3>Sharpen effect</h3>\n            <p class=\"text-justify\">A sharpening filter makes the transition between the various regions present in an image more obvious rather than being smooth. As an image passes through a sharpening filter the brighter pixels are boosted as relative to its neighbors.</p>\n            <b-img thumbnail center width=\"500\" src=\"https://i.stack.imgur.com/1yRRJ.png\"></b-img>\n        </b-row>\n        <b-row align-h=\"left\" align-v=\"left\">\n            <h3>Box blur filter</h3>\n            <p class=\"text-justify\">A box blur (also known as a box linear filter) is a spatial domain linear filter in which each pixel in the resulting image has a value equal to the average value of its neighboring pixels in the input image. It is a form of low-pass (\"blurring\") filter.</p>\n            <b-img thumbnail center width=\"500\" src=\"https://miro.medium.com/max/1400/1*DUut28QltnpM2d3MAQQhGw.png\"></b-img>\n        </b-row>\n        <b-row>\n            <h3>Results</h3>\n        </b-row>\n        <b-col>\n            <h3>Image/Video Processing App</h3>\n            <SketchP5 :sketch=\"first_sketch\" class=\"mt-4\" :width=\"960\" :heigth=\"640\" :index=\"'-1'\"/>\n        </b-col>\n        <b-col>\n            <h3>Magnifier</h3>\n            <SketchP5 :sketch=\"second_sketch\" class=\"mt-4\" :width=\"960\" :heigth=\"640\" :index=\"'-2'\"/>\n        </b-col>\n        <!-- <b-row>\n            <h2>Discussion</h2>\n            <p class=\"text-justify\">\n                This work applies the concept of scene trees using different devices to interact with a 3D brush (wacom tablet and webcam). The input is transformed from screen space to world space using the library p5.treegl which performs several matrices operations to achieve this result. The main idea behind this work is the relation between a 2D space with a 3D space using a third input corresponding to the z-axis which allow us tranform points coordinates depending on whether them are going to be displayed. This principle is applied in different sectors that work on computer graphics, it is common to see scene trees implemented in such a way that they are both time and memory efficient.\n            </p>\n        </b-row>\n        <b-row>\n            <h2>Conclusion</h2>\n            <ul>\n                <li>Scene trees are a important data structure that allow tranform operations between different spaces using matrices operations.</li>\n                <li>Scene trees are applied in several fields, especially in game development where characters interact in different worlds that have multiple objects contributing across different perspectives.</li>\n                <li>Scene trees recreate the geometry of the real world by abstracting the actors to objects with perspective properties and attributes.</li>\n            </ul>\n        </b-row> -->\n    </b-container>\n</template>\n\n<script>\n    import image_processing from '../sketches/image_processing.p5';\n    import magnifier from '../sketches/magnifier.p5'\n    import SketchP5 from '../components/SketchP5.vue';\n\n    // import CodeHighlight from \"vue-code-highlight/src/CodeHighlight.vue\";\n    import \"vue-code-highlight/themes/duotone-sea.css\";\n    import \"vue-code-highlight/themes/window.css\";\n\n    export default {\n        name: \"VisualIllusion\",\n        components: {\n            SketchP5,\n            // CodeHighlight\n        },\n        data(){\n            return {\n                stroke: true,\n                grid: true,\n                antialiasing: true,\n                first_sketch: image_processing,\n                second_sketch: magnifier\n            }\n        },\n        created(){  \n            \n        }\n    };\n</script>\n\n<style scoped>\n    p, li {\n        font-size: 1.25rem;\n    }    \n    h1 {\n        font-size: 4rem;\n    }\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ImageProcessing.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ImageProcessing.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ImageProcessing.vue?vue&type=template&id=aeb7fb16&scoped=true&\"\nimport script from \"./ImageProcessing.vue?vue&type=script&lang=js&\"\nexport * from \"./ImageProcessing.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ImageProcessing.vue?vue&type=style&index=0&id=aeb7fb16&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"aeb7fb16\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_v","first_sketch","second_sketch","staticRenderFns","sketch","p5","maskShader","img","video_src","video_on","selector","selector2","region","radius","type","WIDTH","HEIGHT","identity_kernel","ridge_kernel","sharpen_kernel","box_blur_kernel","gaussian_blur_kernel","preload","createVideo","hide","readShader","matrices","Tree","pMatrix","mvMatrix","varyings","texcoords2","loadImage","setup","canvas","createCanvas","WEBGL","parent","noStroke","textureMode","NORMAL","createCheckbox","style","changed","checked","setUniform","loop","pause","position","createSlider","createSelect","option","selected","item","value","shader","emitTexOffset","draw","background","quad","mouseX","mouseY","magnifier","name","components","SketchP5","stroke","grid","antialiasing","component"],"sourceRoot":""}