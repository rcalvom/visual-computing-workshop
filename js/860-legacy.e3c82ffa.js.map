{"version":3,"file":"js/860-legacy.e3c82ffa.js","mappings":"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","sources":["webpack://visual-computing-workshop/./src/pages/Antialiasing.vue?8bb7","webpack://visual-computing-workshop/./src/sketches/antialiasing.p5.js","webpack://visual-computing-workshop/src/pages/Antialiasing.vue","webpack://visual-computing-workshop/./src/pages/Antialiasing.vue?1453","webpack://visual-computing-workshop/./src/pages/Antialiasing.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-container',{staticClass:\"mt-4\"},[_c('b-row',{attrs:{\"align-content\":\"center\",\"align-h\":\"center\",\"align-v\":\"center\"}},[_c('h1',{staticClass:\"mt-4\"},[_vm._v(\"Anti-aliasing\")])]),_c('b-row',[_c('h2',{staticClass:\"mt-4\"},[_vm._v(\"Introduction\")])]),_c('b-row',{attrs:{\"align-h\":\"start\",\"align-v\":\"start\"}},[_c('p',{staticClass:\"text-justify\"},[_vm._v(\" Aliasing in digital signal processing is the overlapping that occurs when processing high resolution signals on low resolution media. This phenomenon has been worked on mainly in the theory of computation and its application is mostly in graphics processing. Antialising consists of all techniques related to avoid or reduce the impact generated by this phenomenon. \")])]),_c('b-row',{attrs:{\"align-content\":\"center\",\"align-h\":\"center\",\"align-v\":\"center\"}},[_c('b-col',[_c('b-img',{staticClass:\"mt-4\",attrs:{\"thumbnail\":\"\",\"src\":\"https://www.dataforth.com/g/aliasing-examples.png\"}})],1),_c('b-col',[_c('b-img',{staticClass:\"mt-4\",attrs:{\"thumbnail\":\"\",\"src\":\"https://diit.cz/sites/default/files/styles/large/public/anti_aliasing.png?itok=2ecsdnbt&c=80f32de47ece52d2f4d91285b63428df\"}})],1)],1),_c('b-row',[_c('h2',{staticClass:\"mt-4\"},[_vm._v(\"Literature review\")])]),_c('b-row',[_c('p',[_vm._v(\" In general, this concept was born in the theory of computation where there was a loss of information when one wanted to analyze an analog signal using digital signals. \")])]),_c('b-row',{attrs:{\"align-content\":\"center\",\"align-h\":\"center\",\"align-v\":\"center\"}},[_c('b-col',[_c('b-img',{staticClass:\"mt-4 text-center\",attrs:{\"center\":\"\",\"thumbnail\":\"\",\"src\":\"https://people.finearts.uvic.ca/~aschloss/course_mat/MU207/207equations/aliasing.jpg\"}})],1)],1),_c('b-row',{staticClass:\"mt-4\"},[_c('p',[_vm._v(\" There are applications of anti-aliasing using algorithms on the figures but also using artificial intelligences to predict the points that would help to improve the sampling of the signals. \")])]),_c('b-row',[_c('p',[_vm._v(\" In the article \\\"Evaluating Different Spatial Anti Aliasing Techniques\\\" by Victor Kesten, different methods for the implementation of anti-alising are shown, but it is mentioned that the MSAAx4 and FXAA methods are the most optimal for anti-aliasing in 3D contexts on computers with not very good computational capabilities. \")])]),_c('b-row',{attrs:{\"align-content\":\"center\",\"align-h\":\"center\",\"align-v\":\"center\"}},[_c('b-col',[_c('b-img',{staticClass:\"mt-4 text-center\",attrs:{\"center\":\"\",\"thumbnail\":\"\",\"src\":\"https://www.softzone.es/app/uploads-softzone.es/2021/05/MSAA-Antialiasing.png\"}})],1)],1),_c('b-row',{staticClass:\"mt-4\"},[_c('p',[_vm._v(\" This filter is quite useful in practice as it allows to scale it in iterations in order to adjust it to the performance of the system. \")])]),_c('b-row',[_c('h2',[_vm._v(\"Methods\")])]),_c('b-row',[_c('p',[_vm._v(\" We are going to present an implementation of anti-aliasing using sampling and barycentric coordinates to draw a triangle, here the step by step is as follows \")]),_c('p',[_c('ul',[_c('li',[_vm._v(\" Define the \"),_c('vue-mathjax',{attrs:{\"formula\":\"$(A_x, A_y), (B_x, B_y), (C_x, C_y)$\"}}),_vm._v(\" coordinates of each of the vertices of the triangle to be drawn. The unit of measurement is pixels \")],1),_c('li',[_vm._v(\" Now, we calculate the barycentric coordinates of several points inside the pixels, preferably the amount of these samples will be a number squared. \"),_c('b-img',{staticClass:\"mt-4 text-center\",attrs:{\"center\":\"\",\"thumbnail\":\"\",\"src\":\"https://learnopengl.com/img/advanced/anti_aliasing_rasterization_samples.png\"}})],1),_c('li',{staticClass:\"mt-4\"},[_vm._v(\" With the help of the barycentric coordinates, the number of samples of each pixel within the triangle to be drawn is counted. Depending on this value an alpha value will be defined for the corresponding color. \"),_c('b-img',{staticClass:\"my-4 text-center\",attrs:{\"center\":\"\",\"thumbnail\":\"\",\"src\":\"https://learnopengl.com/img/advanced/anti_aliasing_rasterization_samples_filled.png\"}}),_c('vue-mathjax',{staticClass:\"mt-4\",attrs:{\"formula\":\"$$\\\\alpha = 256 \\\\times \\\\dfrac{\\\\# \\\\text{of samples in the pixel and in the triangle}}{\\\\# \\\\text{of total samples in a pixel}}$$\"}})],1)])])]),_c('b-row',[_c('h2',[_vm._v(\"Code and Results\")])]),_c('b-row',[_c('b-col',{staticClass:\"mb-4\",attrs:{\"cols\":\"12\"}},[_c('SketchP5',{staticClass:\"mt-4\",attrs:{\"sketch\":_vm.sketch,\"width\":960,\"heigth\":640}})],1),_c('b-col',{attrs:{\"cols\":\"2\",\"offset\":\"2\"}},[_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-0x\"}},[_vm._v(\"Punto 1 X\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-0x\",\"type\":\"number\",\"min\":\"1\",\"max\":\"96\",\"value\":\"5\"}})],1),_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-1x\"}},[_vm._v(\"Punto 2 X\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-1x\",\"type\":\"number\",\"min\":\"1\",\"max\":\"96\",\"value\":\"25\"}})],1),_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-2x\"}},[_vm._v(\"Punto 3 X\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-2x\",\"type\":\"number\",\"min\":\"1\",\"max\":\"96\",\"value\":\"25\"}})],1)],1),_c('b-col',{attrs:{\"cols\":\"2\"}},[_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-0y\"}},[_vm._v(\"Punto 1 Y\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-0y\",\"type\":\"number\",\"min\":\"1\",\"max\":\"64\",\"value\":\"22\"}})],1),_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-1y\"}},[_vm._v(\"Punto 2 Y\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-1y\",\"type\":\"number\",\"min\":\"1\",\"max\":\"64\",\"value\":\"5\"}})],1),_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-2y\"}},[_vm._v(\"Punto 3 Y\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-2y\",\"type\":\"number\",\"min\":\"1\",\"max\":\"64\",\"value\":\"30\"}})],1)],1),_c('b-col',{attrs:{\"cols\":\"2\"}},[_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-cols\"}},[_vm._v(\"Columnas\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-cols\",\"type\":\"number\",\"min\":\"1\",\"max\":\"96\",\"value\":\"48\"}})],1),_c('b-row',{staticClass:\"m-2\"},[_c('b-form-checkbox',{attrs:{\"button-variant\":\"primary\",\"id\":\"input-field-antialiasing\",\"switch\":\"\"},model:{value:(_vm.antialiasing),callback:function ($$v) {_vm.antialiasing=$$v},expression:\"antialiasing\"}},[_vm._v(\" Anti-aliasing \")])],1),_c('b-row',{staticClass:\"m-2\"},[_c('b-form-checkbox',{attrs:{\"button-variant\":\"primary\",\"id\":\"input-field-grid\",\"switch\":\"\"},model:{value:(_vm.grid),callback:function ($$v) {_vm.grid=$$v},expression:\"grid\"}},[_vm._v(\" Grid \")])],1)],1),_c('b-col',{attrs:{\"cols\":\"2\"}},[_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-rows\"}},[_vm._v(\"Filas\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-rows\",\"type\":\"number\",\"min\":\"1\",\"max\":\"64\",\"value\":\"32\"}})],1),_c('b-row',{staticClass:\"m-2\"},[_c('b-form-checkbox',{attrs:{\"button-variant\":\"primary\",\"id\":\"input-field-stroke\",\"switch\":\"\"},model:{value:(_vm.stroke),callback:function ($$v) {_vm.stroke=$$v},expression:\"stroke\"}},[_vm._v(\" Stroke \")])],1),_c('b-row',{staticClass:\"m-2\"},[_c('label',{attrs:{\"for\":\"input-field-step\"}},[_vm._v(\"Step\")]),_c('b-form-input',{attrs:{\"size\":\"sm\",\"id\":\"input-field-step\",\"type\":\"number\",\"min\":\"1\",\"max\":\"5\",\"value\":\"3\"}})],1)],1)],1),_c('div',{staticClass:\"mt-4\"},[_c('code-highlight',{attrs:{\"language\":\"javascript\"}},[_c('pre',[_vm._v(\"                /**\\n                * Application of Scanimation visual illusion using p5.js\\n                * @param {p5} p5 reference \\n                */\\n\\n                const sketch = (p5) => {\\n                    const WIDTH = 960;\\n                    const HEIGTH = 640;\\n\\n                    let rows = 32; // max 64\\n                    let cols = 48; // max 96\\n                    \\n                    let length = 10;\\n\\n                    let step = 4;\\n                    let stroke = true;\\n                    let antialiasing = true;\\n                    let grid = true;\\n\\n                    let quadrille;\\n                    let colsInput;\\n                    let rowsInput;\\n\\n                    let vertex0X = 4;\\n                    let vertex0Y = 21;\\n                    let vertex1X = 23;\\n                    let vertex1Y = 4;\\n                    let vertex2X = 24;\\n                    let vertex2Y = 29;\\n                    \\n                    p5.setup = () => {\\n                        var canvas = p5.createCanvas(WIDTH, HEIGTH);\\n                        canvas.parent(\\\"vue-canvas\\\");\\n\\n                        p5.background('#060621');\\n                        quadrille = p5.createQuadrille(cols, rows);\\n\\n                        colsInput = p5.select(\\\"#input-field-cols\\\");\\n                        colsInput.input(sizeInputEvent);\\n\\n                        rowsInput = p5.select(\\\"#input-field-rows\\\");\\n                        rowsInput.input(sizeInputEvent);\\n\\n                        p5.select(\\\"#input-field-stroke\\\").changed(() => {\\n                            stroke = !stroke;\\n                            update();\\n                        });\\n\\n                        p5.select(\\\"#input-field-antialiasing\\\").changed(() => {\\n                            antialiasing = !antialiasing;\\n                            update();\\n                        });\\n\\n                        p5.select(\\\"#input-field-grid\\\").changed(() => {\\n                            grid = !grid;\\n                            update();\\n                        });\\n\\n                        p5.select(\\\"#input-field-0x\\\").input(vertexInputEvent);\\n                        p5.select(\\\"#input-field-1x\\\").input(vertexInputEvent);\\n                        p5.select(\\\"#input-field-2x\\\").input(vertexInputEvent);\\n                        p5.select(\\\"#input-field-0y\\\").input(vertexInputEvent);\\n                        p5.select(\\\"#input-field-1y\\\").input(vertexInputEvent);\\n                        p5.select(\\\"#input-field-2y\\\").input(vertexInputEvent);\\n\\n                        p5.select(\\\"#input-field-step\\\").input((e) => {\\n                            step = parseInt(e.target.value);\\n                            update();\\n                        });\\n\\n                        p5.stroke('white');\\n                        p5.strokeWeight(1);\\n                        p5.noFill();\\n\\n                        update();\\n\\n                        \\n\\n                    }\\n\\n                    const sizeInputEvent = (e) => {\\n                        if(e.target.id == \\\"input-field-cols\\\"){\\n                            cols = parseInt(e.target.value);\\n                        }else if(e.target.id == \\\"input-field-rows\\\"){\\n                            rows = parseInt(e.target.value);\\n                        }\\n                        update();\\n                        \\n                    }\\n\\n                    const vertexInputEvent = (e) => {\\n                        if(e.target.id == \\\"input-field-0x\\\"){\\n                            vertex0X = parseInt(e.target.value) - 1;\\n                        }else if(e.target.id == \\\"input-field-1x\\\"){\\n                            vertex1X = parseInt(e.target.value) - 1;\\n                        }else if(e.target.id == \\\"input-field-2x\\\"){\\n                            vertex2X = parseInt(e.target.value) - 1;\\n                        }else if(e.target.id == \\\"input-field-0y\\\"){\\n                            vertex0Y = parseInt(e.target.value) - 1;\\n                        }else if(e.target.id == \\\"input-field-1y\\\"){\\n                            vertex1Y = parseInt(e.target.value) - 1;\\n                        }else if(e.target.id == \\\"input-field-2y\\\"){\\n                            vertex2Y = parseInt(e.target.value) - 1;\\n                        }\\n                        \\n                        update();\\n                    }\\n\\n                    function update(){\\n                        p5.background('#060621');\\n                        quadrille = p5.createQuadrille(cols, rows);\\n                        length = (WIDTH / cols * rows > HEIGTH) ? HEIGTH / rows : WIDTH / cols;\\n                        for(var i = 0; i < rows; i++){\\n                            for(var j = 0; j < cols; j++){\\n                                quadrille._memory2D[i][j] = p5.color([0, 0, 255, 0]);\\n                            }\\n                        }\\n                        var step_aux;\\n                        if(antialiasing){\\n                            step_aux = step;\\n                        }else{\\n                            step_aux = 2;\\n                        }\\n                        var borderx = 0;\\n                        for(i = 0; i < rows; i+=1/step_aux){\\n                            var bordery = 0;\\n                            if(borderx++ % step_aux == 0){\\n                                continue\\n                            }\\n                            for(j = 0; j < cols; j+=1/step_aux){\\n                                if(bordery++ % step_aux == 0){\\n                                    continue;\\n                                }\\n                                if(grid){\\n                                    p5.point(j * length, i * length);\\n                                }\\n                                var coords = quadrille._barycentric_coords(i, j, vertex0Y, vertex0X, vertex1Y, vertex1X, vertex2Y, vertex2X);\\n                                if (coords.w0 >= 0 && coords.w1 >= 0 && coords.w2 >= 0) {\\n                                    quadrille._memory2D[Math.trunc(i)][Math.trunc(j)] = p5.color([0, 0, 255, p5.alpha(quadrille._memory2D[Math.trunc(i)][Math.trunc(j)]) + Math.trunc(256/Math.pow(step_aux - 1, 2))]);\\n                                }\\n                            }\\n                        }\\n                        if(grid){\\n                            p5.drawQuadrille(quadrille, { cellLength: length, outline: 'grey', outlineWeight: 1, board: true});\\n                        }else{\\n                            p5.drawQuadrille(quadrille, { cellLength: length, outline: 'grey', outlineWeight: 0, board: true});\\n                        }\\n                        if(stroke){\\n                            p5.triangle(vertex0X * length, vertex0Y * length, vertex1X * length, vertex1Y * length, vertex2X * length, vertex2Y * length);\\n                        }\\n                        \\n                    }\\n                \\n                }\\n                \\n                export default sketch;\\n\\n\\n            \")])])],1),_c('b-row',[_c('h2',[_vm._v(\"Discussion\")])]),_c('b-row',[_c('p',[_vm._v(\" For discussion of this article I propose two points \"),_c('ul',[_c('li',[_vm._v(\" Are we actually reducing information loss? Or are we actually adding false information that appears to be the real thing? \")]),_c('li',[_vm._v(\" This implementation using centrobar coordinates is very efficient when we want to draw n-simplexes (triangles, tetrahedra, etc) but how could we do it to draw figures that are not triangles? \")])])])]),_c('b-row',[_c('h2',[_vm._v(\"Conclusion\")]),_c('p',[_c('ul',[_c('li',[_vm._v(\" The barycentric coordinates are very useful in this method of anti.aliasing, where we smooth the loss of information in triangles. \")]),_c('li',[_vm._v(\" Anti-aliasing will not be very useful when we want to represent figures in high resolution media since the loss of information will be very low. \")]),_c('li',[_vm._v(\" The use of this technique in some cases will greatly improve the user experience. \")]),_c('li',[_vm._v(\" Anti-aliasing is a process that should be used with care as it is adding load to the graphics processing. \")])])])]),_c('b-row')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * Application of Scanimation visual illusion using p5.js\n * @param {p5} p5 reference \n */\n\n const sketch = (p5) => {\n    const WIDTH = 960;\n    const HEIGTH = 640;\n\n    let rows = 32; // max 64\n    let cols = 48; // max 96\n    \n    let length = 10;\n\n    let step = 4;\n    let stroke = true;\n    let antialiasing = true;\n    let grid = true;\n\n    let quadrille;\n    let colsInput;\n    let rowsInput;\n\n    let vertex0X = 4;\n    let vertex0Y = 21;\n    let vertex1X = 23;\n    let vertex1Y = 4;\n    let vertex2X = 24;\n    let vertex2Y = 29;\n    \n    p5.setup = () => {\n        var canvas = p5.createCanvas(WIDTH, HEIGTH);\n        canvas.parent(\"vue-canvas\");\n\n        p5.background('#060621');\n        quadrille = p5.createQuadrille(cols, rows);\n\n        colsInput = p5.select(\"#input-field-cols\");\n        colsInput.input(sizeInputEvent);\n\n        rowsInput = p5.select(\"#input-field-rows\");\n        rowsInput.input(sizeInputEvent);\n\n        p5.select(\"#input-field-stroke\").changed(() => {\n            stroke = !stroke;\n            update();\n        });\n\n        p5.select(\"#input-field-antialiasing\").changed(() => {\n            antialiasing = !antialiasing;\n            update();\n        });\n\n        p5.select(\"#input-field-grid\").changed(() => {\n            grid = !grid;\n            update();\n        });\n\n        p5.select(\"#input-field-0x\").input(vertexInputEvent);\n        p5.select(\"#input-field-1x\").input(vertexInputEvent);\n        p5.select(\"#input-field-2x\").input(vertexInputEvent);\n        p5.select(\"#input-field-0y\").input(vertexInputEvent);\n        p5.select(\"#input-field-1y\").input(vertexInputEvent);\n        p5.select(\"#input-field-2y\").input(vertexInputEvent);\n\n        p5.select(\"#input-field-step\").input((e) => {\n            step = parseInt(e.target.value);\n            update();\n        });\n\n        p5.stroke('white');\n        p5.strokeWeight(1);\n        p5.noFill();\n\n        update();\n\n        \n\n    }\n\n    const sizeInputEvent = (e) => {\n        if(e.target.id == \"input-field-cols\"){\n            cols = parseInt(e.target.value);\n        }else if(e.target.id == \"input-field-rows\"){\n            rows = parseInt(e.target.value);\n        }\n        update();\n        \n    }\n\n    const vertexInputEvent = (e) => {\n        if(e.target.id == \"input-field-0x\"){\n            vertex0X = parseInt(e.target.value) - 1;\n        }else if(e.target.id == \"input-field-1x\"){\n            vertex1X = parseInt(e.target.value) - 1;\n        }else if(e.target.id == \"input-field-2x\"){\n            vertex2X = parseInt(e.target.value) - 1;\n        }else if(e.target.id == \"input-field-0y\"){\n            vertex0Y = parseInt(e.target.value) - 1;\n        }else if(e.target.id == \"input-field-1y\"){\n            vertex1Y = parseInt(e.target.value) - 1;\n        }else if(e.target.id == \"input-field-2y\"){\n            vertex2Y = parseInt(e.target.value) - 1;\n        }\n        \n        update();\n    }\n\n    function update(){\n        p5.background('#060621');\n        quadrille = p5.createQuadrille(cols, rows);\n        length = (WIDTH / cols * rows > HEIGTH) ? HEIGTH / rows : WIDTH / cols;\n        for(var i = 0; i < rows; i++){\n            for(var j = 0; j < cols; j++){\n                quadrille._memory2D[i][j] = p5.color([0, 0, 255, 0]);\n            }\n        }\n        var step_aux;\n        if(antialiasing){\n            step_aux = step;\n        }else{\n            step_aux = 2;\n        }\n        var borderx = 0;\n        for(i = 0; i < rows; i+=1/step_aux){\n            var bordery = 0;\n            if(borderx++ % step_aux == 0){\n                continue\n            }\n            for(j = 0; j < cols; j+=1/step_aux){\n                if(bordery++ % step_aux == 0){\n                    continue;\n                }\n                if(grid){\n                    p5.point(j * length, i * length);\n                }\n                var coords = quadrille._barycentric_coords(i, j, vertex0Y, vertex0X, vertex1Y, vertex1X, vertex2Y, vertex2X);\n                if (coords.w0 >= 0 && coords.w1 >= 0 && coords.w2 >= 0) {\n                    quadrille._memory2D[Math.trunc(i)][Math.trunc(j)] = p5.color([0, 0, 255, p5.alpha(quadrille._memory2D[Math.trunc(i)][Math.trunc(j)]) + Math.trunc(256/Math.pow(step_aux - 1, 2))]);\n                }\n            }\n        }\n        if(grid){\n            p5.drawQuadrille(quadrille, { cellLength: length, outline: 'grey', outlineWeight: 1, board: true});\n        }else{\n            p5.drawQuadrille(quadrille, { cellLength: length, outline: 'grey', outlineWeight: 0, board: true});\n        }\n        if(stroke){\n            p5.triangle(vertex0X * length, vertex0Y * length, vertex1X * length, vertex1Y * length, vertex2X * length, vertex2Y * length);\n        }\n        \n    }\n  \n  }\n  \n  export default sketch;\n  \n  ","<template>\n    <b-container class=\"mt-4\">\n        <b-row align-content=\"center\" align-h=\"center\" align-v=\"center\">\n            <h1 class=\"mt-4\">Anti-aliasing</h1>\n        </b-row> \n        <b-row>\n            <h2 class=\"mt-4\">Introduction</h2>\n        </b-row>\n        <b-row align-h=\"start\" align-v=\"start\">\n            <p class=\"text-justify\">\n                Aliasing in digital signal processing is the overlapping that occurs when processing high resolution signals on low resolution media. This phenomenon has been worked on mainly in the theory of computation and its application is mostly in graphics processing. Antialising consists of all techniques related to avoid or reduce the impact generated by this phenomenon.\n            </p>\n        </b-row>\n        <b-row align-content=\"center\" align-h=\"center\" align-v=\"center\">\n            <b-col>\n                <b-img thumbnail src=\"https://www.dataforth.com/g/aliasing-examples.png\" class=\"mt-4\"/>\n            </b-col>\n            <b-col>\n                <b-img thumbnail src=\"https://diit.cz/sites/default/files/styles/large/public/anti_aliasing.png?itok=2ecsdnbt&c=80f32de47ece52d2f4d91285b63428df\" class=\"mt-4\"/>\n            </b-col>\n        </b-row>\n        <b-row>\n            <h2 class=\"mt-4\">Literature review</h2>\n        </b-row>\n        <b-row>\n            <p>\n                In general, this concept was born in the theory of computation where there was a loss of information when one wanted to analyze an analog signal using digital signals.\n            </p>\n        </b-row>\n        <b-row align-content=\"center\" align-h=\"center\" align-v=\"center\">\n            <b-col>\n                <b-img center thumbnail src=\"https://people.finearts.uvic.ca/~aschloss/course_mat/MU207/207equations/aliasing.jpg\" class=\"mt-4 text-center\"/>\n            </b-col>\n        </b-row>\n        <b-row class=\"mt-4\">\n            <p>\n                There are applications of anti-aliasing using algorithms on the figures but also using artificial intelligences to predict the points that would help to improve the sampling of the signals.\n            </p>\n        </b-row>\n        <b-row>\n            <p>\n                In the article \"Evaluating Different Spatial Anti Aliasing Techniques\" by Victor Kesten, different methods for the implementation of anti-alising are shown, but it is mentioned that the MSAAx4 and FXAA methods are the most optimal for anti-aliasing in 3D contexts on computers with not very good computational capabilities.\n            </p>\n        </b-row>\n        <b-row align-content=\"center\" align-h=\"center\" align-v=\"center\">\n            <b-col>\n                <b-img center thumbnail src=\"https://www.softzone.es/app/uploads-softzone.es/2021/05/MSAA-Antialiasing.png\" class=\"mt-4 text-center\"/>\n            </b-col>\n        </b-row>\n        <b-row class=\"mt-4\">\n            <p>\n                This filter is quite useful in practice as it allows to scale it in iterations in order to adjust it to the performance of the system.\n            </p>\n        </b-row>\n        <b-row>\n            <h2>Methods</h2>\n        </b-row>\n        <b-row>\n            <p>\n                We are going to present an implementation of anti-aliasing using sampling and barycentric coordinates to draw a triangle, here the step by step is as follows\n            </p>\n            <p>\n                <ul>\n                    <li>\n                        Define the <vue-mathjax formula=\"$(A_x, A_y), (B_x, B_y), (C_x, C_y)$\"/> coordinates of each of the vertices of the triangle to be drawn. The unit of measurement is pixels\n                    </li>\n                    <li>\n                        Now, we calculate the barycentric coordinates of several points inside the pixels, preferably the amount of these samples will be a number squared.\n                        <b-img center thumbnail src=\"https://learnopengl.com/img/advanced/anti_aliasing_rasterization_samples.png\" class=\"mt-4 text-center\"/>\n                    </li>\n                    <li class=\"mt-4\">\n                        With the help of the barycentric coordinates, the number of samples of each pixel within the triangle to be drawn is counted. Depending on this value an alpha value will be defined for the corresponding color.\n                        <b-img center thumbnail src=\"https://learnopengl.com/img/advanced/anti_aliasing_rasterization_samples_filled.png\" class=\"my-4 text-center\"/>\n                        <vue-mathjax class=\"mt-4\" formula=\"$$\\alpha = 256 \\times \\dfrac{\\# \\text{of samples in the pixel and in the triangle}}{\\# \\text{of total samples in a pixel}}$$\"/>\n                    </li>\n                </ul>\n            </p>\n        </b-row>\n        <b-row>\n            <h2>Code and Results</h2>\n        </b-row>\n        <b-row>\n            <b-col cols=\"12\" class=\"mb-4\">\n                <SketchP5 :sketch=\"sketch\" class=\"mt-4\" :width=\"960\" :heigth=\"640\"/>\n            </b-col>\n            <b-col cols=\"2\" offset=\"2\">\n                <b-row class=\"m-2\">\n                    <label for=\"input-field-0x\">Punto 1 X</label>\n                    <b-form-input size=\"sm\" id=\"input-field-0x\" type=\"number\" min=\"1\" max=\"96\" value=\"5\"/>\n                </b-row>\n                <b-row class=\"m-2\">\n                    <label for=\"input-field-1x\">Punto 2 X</label>\n                    <b-form-input size=\"sm\" id=\"input-field-1x\" type=\"number\" min=\"1\" max=\"96\" value=\"25\"/>\n                </b-row>\n                <b-row class=\"m-2\">\n                    <label for=\"input-field-2x\">Punto 3 X</label>\n                    <b-form-input size=\"sm\" id=\"input-field-2x\" type=\"number\" min=\"1\" max=\"96\" value=\"25\"/>\n                </b-row>\n            </b-col>\n            <b-col cols=\"2\" >\n               <b-row class=\"m-2\">\n                   <label for=\"input-field-0y\">Punto 1 Y</label>\n                    <b-form-input size=\"sm\" id=\"input-field-0y\" type=\"number\" min=\"1\" max=\"64\" value=\"22\"/>\n                </b-row>\n                <b-row class=\"m-2\">\n                    <label for=\"input-field-1y\">Punto 2 Y</label>\n                    <b-form-input size=\"sm\" id=\"input-field-1y\" type=\"number\" min=\"1\" max=\"64\" value=\"5\"/>\n                </b-row>\n                <b-row class=\"m-2\">\n                    <label for=\"input-field-2y\">Punto 3 Y</label>\n                    <b-form-input size=\"sm\" id=\"input-field-2y\" type=\"number\" min=\"1\" max=\"64\" value=\"30\"/>\n                </b-row>\n            </b-col>\n            <b-col cols=\"2\">\n                <b-row class=\"m-2\">\n                    <label for=\"input-field-cols\">Columnas</label>\n                    <b-form-input size=\"sm\" id=\"input-field-cols\" type=\"number\" min=\"1\" max=\"96\" value=\"48\"/>\n                </b-row>\n                <b-row class=\"m-2\">\n                   <b-form-checkbox button-variant=\"primary\" id=\"input-field-antialiasing\" switch v-model=\"antialiasing\">\n                        Anti-aliasing\n                    </b-form-checkbox>\n                </b-row>\n                <b-row class=\"m-2\">\n                   <b-form-checkbox button-variant=\"primary\" id=\"input-field-grid\" switch v-model=\"grid\">\n                        Grid\n                    </b-form-checkbox>\n                </b-row>\n            </b-col>\n            <b-col cols=\"2\" >\n               <b-row class=\"m-2\">\n                   <label for=\"input-field-rows\">Filas</label>\n                    <b-form-input size=\"sm\" id=\"input-field-rows\" type=\"number\" min=\"1\" max=\"64\" value=\"32\"/>\n                </b-row>\n                <b-row class=\"m-2\">\n                   <b-form-checkbox button-variant=\"primary\" id=\"input-field-stroke\" switch v-model=\"stroke\">\n                        Stroke\n                    </b-form-checkbox>\n                </b-row>\n                <b-row class=\"m-2\">\n                   <label for=\"input-field-step\">Step</label>\n                    <b-form-input size=\"sm\" id=\"input-field-step\" type=\"number\" min=\"1\" max=\"5\" value=\"3\"/>\n                </b-row>\n            </b-col>\n        </b-row>\n        <div class=\"mt-4\">\n            <code-highlight language=\"javascript\">\n                <pre>\n                    /**\n                    * Application of Scanimation visual illusion using p5.js\n                    * @param {p5} p5 reference \n                    */\n\n                    const sketch = (p5) => {\n                        const WIDTH = 960;\n                        const HEIGTH = 640;\n\n                        let rows = 32; // max 64\n                        let cols = 48; // max 96\n                        \n                        let length = 10;\n\n                        let step = 4;\n                        let stroke = true;\n                        let antialiasing = true;\n                        let grid = true;\n\n                        let quadrille;\n                        let colsInput;\n                        let rowsInput;\n\n                        let vertex0X = 4;\n                        let vertex0Y = 21;\n                        let vertex1X = 23;\n                        let vertex1Y = 4;\n                        let vertex2X = 24;\n                        let vertex2Y = 29;\n                        \n                        p5.setup = () => {\n                            var canvas = p5.createCanvas(WIDTH, HEIGTH);\n                            canvas.parent(\"vue-canvas\");\n\n                            p5.background('#060621');\n                            quadrille = p5.createQuadrille(cols, rows);\n\n                            colsInput = p5.select(\"#input-field-cols\");\n                            colsInput.input(sizeInputEvent);\n\n                            rowsInput = p5.select(\"#input-field-rows\");\n                            rowsInput.input(sizeInputEvent);\n\n                            p5.select(\"#input-field-stroke\").changed(() => {\n                                stroke = !stroke;\n                                update();\n                            });\n\n                            p5.select(\"#input-field-antialiasing\").changed(() => {\n                                antialiasing = !antialiasing;\n                                update();\n                            });\n\n                            p5.select(\"#input-field-grid\").changed(() => {\n                                grid = !grid;\n                                update();\n                            });\n\n                            p5.select(\"#input-field-0x\").input(vertexInputEvent);\n                            p5.select(\"#input-field-1x\").input(vertexInputEvent);\n                            p5.select(\"#input-field-2x\").input(vertexInputEvent);\n                            p5.select(\"#input-field-0y\").input(vertexInputEvent);\n                            p5.select(\"#input-field-1y\").input(vertexInputEvent);\n                            p5.select(\"#input-field-2y\").input(vertexInputEvent);\n\n                            p5.select(\"#input-field-step\").input((e) => {\n                                step = parseInt(e.target.value);\n                                update();\n                            });\n\n                            p5.stroke('white');\n                            p5.strokeWeight(1);\n                            p5.noFill();\n\n                            update();\n\n                            \n\n                        }\n\n                        const sizeInputEvent = (e) => {\n                            if(e.target.id == \"input-field-cols\"){\n                                cols = parseInt(e.target.value);\n                            }else if(e.target.id == \"input-field-rows\"){\n                                rows = parseInt(e.target.value);\n                            }\n                            update();\n                            \n                        }\n\n                        const vertexInputEvent = (e) => {\n                            if(e.target.id == \"input-field-0x\"){\n                                vertex0X = parseInt(e.target.value) - 1;\n                            }else if(e.target.id == \"input-field-1x\"){\n                                vertex1X = parseInt(e.target.value) - 1;\n                            }else if(e.target.id == \"input-field-2x\"){\n                                vertex2X = parseInt(e.target.value) - 1;\n                            }else if(e.target.id == \"input-field-0y\"){\n                                vertex0Y = parseInt(e.target.value) - 1;\n                            }else if(e.target.id == \"input-field-1y\"){\n                                vertex1Y = parseInt(e.target.value) - 1;\n                            }else if(e.target.id == \"input-field-2y\"){\n                                vertex2Y = parseInt(e.target.value) - 1;\n                            }\n                            \n                            update();\n                        }\n\n                        function update(){\n                            p5.background('#060621');\n                            quadrille = p5.createQuadrille(cols, rows);\n                            length = (WIDTH / cols * rows > HEIGTH) ? HEIGTH / rows : WIDTH / cols;\n                            for(var i = 0; i &lt; rows; i++){\n                                for(var j = 0; j &lt; cols; j++){\n                                    quadrille._memory2D[i][j] = p5.color([0, 0, 255, 0]);\n                                }\n                            }\n                            var step_aux;\n                            if(antialiasing){\n                                step_aux = step;\n                            }else{\n                                step_aux = 2;\n                            }\n                            var borderx = 0;\n                            for(i = 0; i &lt; rows; i+=1/step_aux){\n                                var bordery = 0;\n                                if(borderx++ % step_aux == 0){\n                                    continue\n                                }\n                                for(j = 0; j &lt; cols; j+=1/step_aux){\n                                    if(bordery++ % step_aux == 0){\n                                        continue;\n                                    }\n                                    if(grid){\n                                        p5.point(j * length, i * length);\n                                    }\n                                    var coords = quadrille._barycentric_coords(i, j, vertex0Y, vertex0X, vertex1Y, vertex1X, vertex2Y, vertex2X);\n                                    if (coords.w0 >= 0 && coords.w1 >= 0 && coords.w2 >= 0) {\n                                        quadrille._memory2D[Math.trunc(i)][Math.trunc(j)] = p5.color([0, 0, 255, p5.alpha(quadrille._memory2D[Math.trunc(i)][Math.trunc(j)]) + Math.trunc(256/Math.pow(step_aux - 1, 2))]);\n                                    }\n                                }\n                            }\n                            if(grid){\n                                p5.drawQuadrille(quadrille, { cellLength: length, outline: 'grey', outlineWeight: 1, board: true});\n                            }else{\n                                p5.drawQuadrille(quadrille, { cellLength: length, outline: 'grey', outlineWeight: 0, board: true});\n                            }\n                            if(stroke){\n                                p5.triangle(vertex0X * length, vertex0Y * length, vertex1X * length, vertex1Y * length, vertex2X * length, vertex2Y * length);\n                            }\n                            \n                        }\n                    \n                    }\n                    \n                    export default sketch;\n  \n  \n                </pre>\n            </code-highlight>\n        </div>\n        <b-row>\n            <h2>Discussion</h2>\n        </b-row>\n        <b-row>\n            <p>\n                For discussion of this article I propose two points\n                <ul>\n                    <li>\n                        Are we actually reducing information loss? Or are we actually adding false information that appears to be the real thing?\n                    </li>\n                    <li>\n                        This implementation using centrobar coordinates is very efficient when we want to draw n-simplexes (triangles, tetrahedra, etc) but how could we do it to draw figures that are not triangles?\n                    </li>\n                </ul>\n            </p>\n        </b-row>\n        <b-row>\n            <h2>Conclusion</h2>\n            <p>\n                <ul>\n                    <li>\n                        The barycentric coordinates are very useful in this method of anti.aliasing, where we smooth the loss of information in triangles.\n                    </li>\n                    <li>\n                        Anti-aliasing will not be very useful when we want to represent figures in high resolution media since the loss of information will be very low.\n                    </li>\n                    <li>\n                        The use of this technique in some cases will greatly improve the user experience.\n                    </li>\n                    <li>\n                        Anti-aliasing is a process that should be used with care as it is adding load to the graphics processing.\n                    </li>\n                </ul>\n            </p>\n        </b-row>\n        <b-row>\n            \n        </b-row>\n    </b-container>\n</template>\n\n<script>\n    import antialiasing from '../sketches/antialiasing.p5';\n    import SketchP5 from '../components/SketchP5.vue';\n\n    import CodeHighlight from \"vue-code-highlight/src/CodeHighlight.vue\";\n    import \"vue-code-highlight/themes/duotone-sea.css\";\n    import \"vue-code-highlight/themes/window.css\";\n    import { VueMathjax } from 'vue-mathjax';\n\n    export default {\n        name: \"VisualIllusion\",\n        components: {\n            SketchP5,\n            CodeHighlight,\n            'vue-mathjax': VueMathjax\n        },\n        data(){\n            return {\n                stroke: true,\n                grid: true,\n                antialiasing: true,\n                sketch: antialiasing\n            }\n        },\n        created(){  \n            \n        }\n    };\n</script>\n\n<style scoped>\n    p, li {\n        font-size: 1.25rem;\n    }    \n    h1 {\n        font-size: 4rem;\n    }\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Antialiasing.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Antialiasing.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Antialiasing.vue?vue&type=template&id=660d2393&scoped=true&\"\nimport script from \"./Antialiasing.vue?vue&type=script&lang=js&\"\nexport * from \"./Antialiasing.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Antialiasing.vue?vue&type=style&index=0&id=660d2393&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"660d2393\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_v","sketch","model","value","callback","$$v","antialiasing","expression","grid","stroke","staticRenderFns","p5","quadrille","colsInput","rowsInput","WIDTH","HEIGTH","rows","cols","length","step","vertex0X","vertex0Y","vertex1X","vertex1Y","vertex2X","vertex2Y","setup","canvas","createCanvas","parent","background","createQuadrille","select","input","sizeInputEvent","changed","update","vertexInputEvent","e","parseInt","target","strokeWeight","noFill","id","i","j","_memory2D","color","step_aux","borderx","bordery","point","coords","_barycentric_coords","w0","w1","w2","Math","trunc","alpha","pow","drawQuadrille","cellLength","outline","outlineWeight","board","triangle","name","components","SketchP5","CodeHighlight","component"],"sourceRoot":""}